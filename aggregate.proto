syntax = "proto3";


// AggregateBool is a container that counts individual instances of true/false
// It should be used for aggregating streams of bool values to appropriately
// account for their distribution.
message AggregateBool {
  uint64 true = 1;
  uint64 false = 2;
}

// AggregateBoolTag is a tagged union that can switch from single
// one via a bool type and many via an AggregateBool type.
// It may be desirable to copy this code and use it directly
message AggregateBoolTag {
  oneof one_or_many {
    bool one = 1;
    AggregateBool many = 2;
  }
}

// BigInt is a string representation of a big integer
// It's not the most efficient transmission, but it's easier than
// repeated enum, bytes or repeated uint64 for consuming JSON.
message BigInt {
  string value = 1;
}

// AggregateLong is a container that holds information about a set of longs
// It should be used for aggregating streams of long values to appropriately
// account for their distribution
message AggregateLong {
  BigInt sum = 1; 
  uint64 source_count = 2;
  uint64 min = 3;
  uint64 max = 4;
  double mean = 5;
  uint64 median = 6;
  double standard_deviation = 7;
}

// AggregateLongTag is a tagged union that can switch from single
// one via a long type and multi bools via an AggregateLong type.
// It may be desirable to copy this code and use it directly
message AggregateLongTag {
  oneof one_or_many {
    uint64 one = 1;
    AggregateCount many = 2;
  }
}

// AggregateDouble is a container that holds information about a set of doubles
// It should be used for aggregating streams of double values to appropriately
// account for their distribution.
message AggregateDouble {
  double mean = 1;
  uint64 source_count = 2;
  double min = 3;
  double max = 4;
  double median = 5;
  double standard_deviation = 6;
}

// AggregateDoubleTag is a tagged union that can switch from single
// one via a double type and many via an AggregateDouble type.
// It may be desirable to copy this code and use it directly
message AggregateDoubleTag {
  oneof one_or_many {
    double one = 1;
    AggregateDouble many = 2;
  }
}

// AggregateTimestamp is a container that holds information about a set of
// Timestamps. It should be used for aggregating streams of timestamp values
// to appropriately account for their distribution.
message AggregateTimestamp {
  Timestamp mean = 1;
  uint64 source_count = 2;
  Timestamp min = 3; // earliest
  Timestamp max = 4; // latest
  Timestamp median = 5;
  double standard_deviation = 6;
}
